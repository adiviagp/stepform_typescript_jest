{"ast":null,"code":"var _jsxFileName = \"/Users/adiviagp/Documents/ReactJs/portofolio/stepform/src/components/MultiStepForm.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Box, Button, Card, CardContent, CircularProgress, FormControl, Grid, InputLabel, Step, StepLabel, Stepper, FormHelperText } from '@material-ui/core';\nimport { ErrorMessage, Field, Form, Formik, useField } from 'formik';\nimport { CheckboxWithLabel, TextField, Select } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object, string } from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nexport function MultiStepForm(_ref) {\n  let {\n    onSubmit\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(FormikStepper, {\n        initialValues: {\n          firstName: '',\n          job: 'EMPTY',\n          city: '',\n          millionaire: false,\n          money: 0,\n          description: ''\n        },\n        onSubmit: async values => {\n          await sleep(500);\n          onSubmit(values);\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"Personal Data\",\n          validationSchema: object({\n            firstName: string().required('Your First Name is Required').max(5, `Your name can't be longer than 5 chars`),\n            city: string().required().min(8).max(11),\n            job: string().required('You need to select your job situation').not(['EMPTY'], 'You need to select your job situation')\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              id: \"firstName\",\n              fullWidth: true,\n              name: \"firstName\" // component={TextField}\n              ,\n              component: CustomTextFieldWithErrorMessage,\n              label: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(CustomDropdown, {\n              name: \"job\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              id: \"city\",\n              fullWidth: true,\n              name: \"city\",\n              component: CustomTextFieldWithErrorMessage // component={TextField}\n              ,\n              label: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              name: \"millionaire\",\n              id: \"millionaire\",\n              type: \"checkbox\",\n              component: CheckboxWithLabel,\n              Label: {\n                label: 'I am a millionaire'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"Bank Accounts\",\n          validationSchema: object({\n            money: mixed().when('millionaire', {\n              is: true,\n              then: number().required().min(1000000, 'Because you said you are a millionaire you need to have 1 million'),\n              otherwise: number().required()\n            })\n          }),\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"money\",\n              id: \"money\",\n              type: \"number\",\n              component: CustomTextFieldWithErrorMessage,\n              label: \"All the money I have\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"More Info\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              id: \"description\",\n              name: \"description\",\n              component: TextField,\n              label: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = MultiStepForm;\nexport function FormikStep(_ref2) {\n  let {\n    children\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_c2 = FormikStep;\nexport function FormikStepper(_ref3) {\n  _s();\n\n  let {\n    children,\n    ...props\n  } = _ref3;\n  const childrenArray = React.Children.toArray(children);\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n  const [completed, setCompleted] = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, { ...props,\n    // eslint-disable-next-line\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n        setCompleted(true);\n      } else {\n        setStep(s => s + 1); // the next line was not covered in the youtube video\n        //\n        // If you have multiple fields on the same step\n        // we will see they show the validation error all at the same time after the first step!\n        //\n        // If you want to keep that behaviour, then, comment the next line :)\n        // If you want the second/third/fourth/etc steps with the same behaviour\n        //    as the first step regarding validation errors, then the next line is for you! =)\n        //\n        // In the example of the video, it doesn't make any difference, because we only\n        //    have one field with validation in the second step :)\n\n        helpers.setTouched({});\n      }\n    },\n    children: _ref4 => {\n      let {\n        isSubmitting\n      } = _ref4;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(Stepper, {\n          alternativeLabel: true,\n          activeStep: step,\n          children: childrenArray.map((child, index) => /*#__PURE__*/_jsxDEV(Step, {\n            completed: step > index || completed,\n            children: /*#__PURE__*/_jsxDEV(StepLabel, {\n              children: child.props.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)\n          }, child.props.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), currentChild, /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [step > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              disabled: isSubmitting,\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => setStep(s => s - 1),\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: \"1rem\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 34\n              }, this) : null,\n              disabled: isSubmitting,\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              children: isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormikStepper, \"ofStvXvE4s5zSVpZTDgv2Qwx0Xo=\");\n\n_c3 = FormikStepper;\nexport function CustomDropdown(_ref5) {\n  _s2();\n\n  let {\n    name\n  } = _ref5;\n  const [field, props] = useField(name);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    fullWidth: true,\n    error: !!props.error,\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      htmlFor: \"job\",\n      children: \"Job Situation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      component: Select,\n      native: true,\n      name: \"job\",\n      inputProps: {\n        id: 'job',\n        'aria-errormessage': props.error ? 'job-error' : null\n      },\n      children: [field.value !== 'EMPTY' ? null : /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"EMPTY\",\n        children: \"Select your job situation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"FULL\",\n        children: \"Full-Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"PART\",\n        children: \"Part-Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"UNEMPLOYED\",\n        children: \"Unemployed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      name: \"job\",\n      children: message => /*#__PURE__*/_jsxDEV(FormHelperText, {\n        id: \"job-error\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this); // return (\n  //   <FormControl fullWidth error={!!props.error && props.touched}>\n  //     <InputLabel htmlFor=\"job\">Job Situation</InputLabel>\n  //     <Field\n  //       component={Select}\n  //       name=\"job\"\n  //       inputProps={{\n  //         id: 'job',\n  //         'aria-errormessage': props.error ? 'job-error' : null,\n  //       }}\n  //     >\n  //       {field.value !== 'EMPTY' ? null : (\n  //         <MenuItem value=\"EMPTY\">Select your job situation</MenuItem>\n  //       )}\n  //       <MenuItem value=\"FULL\">Full-Time</MenuItem>\n  //       <MenuItem value=\"PART\">Part-Time</MenuItem>\n  //       <MenuItem value=\"UNEMPLOYED\">Unemployed</MenuItem>\n  //     </Field>\n  //     <ErrorMessage name=\"job\">\n  //       {(message) => <FormHelperText id=\"job-error\">{message}</FormHelperText>}\n  //     </ErrorMessage>\n  //   </FormControl>\n  // );\n}\n\n_s2(CustomDropdown, \"l8pmxqVpvnuB/jDW2FvlEfigIU4=\", false, function () {\n  return [useField];\n});\n\n_c4 = CustomDropdown;\nexport function CustomTextFieldWithErrorMessage(props) {\n  const hasError = !!props.form.errors[props.field.name];\n  const inputProps = hasError ? { ...props.inputProps,\n    'aria-errormessage': `${props.field.name}-helper-text`\n  } : props.inputProps;\n  return /*#__PURE__*/_jsxDEV(TextField, { ...props,\n    inputProps: inputProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 10\n  }, this);\n}\n_c5 = CustomTextFieldWithErrorMessage;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MultiStepForm\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");\n$RefreshReg$(_c4, \"CustomDropdown\");\n$RefreshReg$(_c5, \"CustomTextFieldWithErrorMessage\");","map":{"version":3,"sources":["/Users/adiviagp/Documents/ReactJs/portofolio/stepform/src/components/MultiStepForm.tsx"],"names":["Box","Button","Card","CardContent","CircularProgress","FormControl","Grid","InputLabel","Step","StepLabel","Stepper","FormHelperText","ErrorMessage","Field","Form","Formik","useField","CheckboxWithLabel","TextField","Select","React","useState","mixed","number","object","string","sleep","time","Promise","acc","setTimeout","MultiStepForm","onSubmit","firstName","job","city","millionaire","money","description","values","required","max","min","not","CustomTextFieldWithErrorMessage","label","when","is","then","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","currentChild","completed","setCompleted","isLastStep","length","validationSchema","helpers","s","setTouched","isSubmitting","map","child","index","CustomDropdown","name","field","error","id","value","message","hasError","form","errors","inputProps"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  FormControl,\n  Grid,\n  InputBaseComponentProps,\n  InputLabel,\n  MenuItem,\n  Step,\n  StepLabel,\n  Stepper,\n  TextField as RealTextField,\n  FormHelperText,\n  NativeSelect,\n} from '@material-ui/core';\nimport {\n  ErrorMessage,\n  Field,\n  FieldAttributes,\n  Form,\n  Formik,\n  FormikConfig,\n  FormikValues,\n  useField,\n} from 'formik';\nimport {\n  CheckboxWithLabel,\n  TextField,\n  Select,\n  TextFieldProps,\n} from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object, string } from 'yup';\n\nconst sleep = (time: number) => new Promise((acc) => setTimeout(acc, time));\n\nexport interface FormValues {\n  firstName: string;\n  job: string;\n  millionaire: boolean;\n  money: number;\n  description: string;\n  city: string;\n}\n\nexport interface MultiStepFormProps {\n  onSubmit: (formValue: FormValues) => void;\n}\n\nexport function MultiStepForm({ onSubmit }: MultiStepFormProps) {\n  return (\n    <Card>\n      <CardContent>\n        <FormikStepper<FormValues>\n          initialValues={{\n            firstName: '',\n            job: 'EMPTY',\n            city: '',\n            millionaire: false,\n            money: 0,\n            description: '',\n          }}\n          onSubmit={async (values) => {\n            await sleep(500);\n            onSubmit(values);\n          }}\n        >\n          <FormikStep\n            label=\"Personal Data\"\n            validationSchema={object({\n              firstName: string()\n                .required('Your First Name is Required')\n                .max(5, `Your name can't be longer than 5 chars`),\n              city: string().required().min(8).max(11),\n              job: string()\n                .required('You need to select your job situation')\n                .not(['EMPTY'], 'You need to select your job situation'),\n            })}\n          >\n            <Box paddingBottom={2}>\n              <Field\n                id=\"firstName\"\n                fullWidth\n                name=\"firstName\"\n                // component={TextField}\n                component={CustomTextFieldWithErrorMessage}\n                label=\"First Name\"\n              />\n            </Box>\n\n            <Box paddingBottom={2}>\n              <CustomDropdown name=\"job\" />\n            </Box>\n\n            <Box paddingBottom={2}>\n              <Field\n                id=\"city\"\n                fullWidth\n                name=\"city\"\n                component={CustomTextFieldWithErrorMessage}\n                // component={TextField}\n                label=\"City\"\n              />\n            </Box>\n\n            <Box paddingBottom={2}>\n              <Field\n                name=\"millionaire\"\n                id=\"millionaire\"\n                type=\"checkbox\"\n                component={CheckboxWithLabel}\n                Label={{ label: 'I am a millionaire' }}\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep\n            label=\"Bank Accounts\"\n            validationSchema={object({\n              money: mixed().when('millionaire', {\n                is: true,\n                then: number()\n                  .required()\n                  .min(\n                    1_000_000,\n                    'Because you said you are a millionaire you need to have 1 million'\n                  ),\n                otherwise: number().required(),\n              }),\n            })}\n          >\n            <Box paddingBottom={2}>\n              <Field\n                fullWidth\n                name=\"money\"\n                id=\"money\"\n                type=\"number\"\n                component={CustomTextFieldWithErrorMessage}\n                label=\"All the money I have\"\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep label=\"More Info\">\n            <Box paddingBottom={2}>\n              <Field\n                fullWidth\n                id=\"description\"\n                name=\"description\"\n                component={TextField}\n                label=\"Description\"\n              />\n            </Box>\n          </FormikStep>\n        </FormikStepper>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport interface FormikStepProps\n  extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\n  label: string;\n}\n\nexport function FormikStep({ children }: FormikStepProps) {\n  return <>{children}</>;\n}\n\nexport function FormikStepper<MyFormValues>({\n  children,\n  ...props\n}: FormikConfig<MyFormValues>) {\n  const childrenArray = React.Children.toArray(\n    children\n  ) as React.ReactElement<FormikStepProps>[];\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n  const [completed, setCompleted] = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return (\n    <Formik<MyFormValues>\n      {...props}\n      // eslint-disable-next-line\n      validationSchema={currentChild.props.validationSchema}\n      onSubmit={async (values, helpers) => {\n        if (isLastStep()) {\n          await props.onSubmit(values, helpers);\n          setCompleted(true);\n        } else {\n          setStep((s) => s + 1);\n\n          // the next line was not covered in the youtube video\n          //\n          // If you have multiple fields on the same step\n          // we will see they show the validation error all at the same time after the first step!\n          //\n          // If you want to keep that behaviour, then, comment the next line :)\n          // If you want the second/third/fourth/etc steps with the same behaviour\n          //    as the first step regarding validation errors, then the next line is for you! =)\n          //\n          // In the example of the video, it doesn't make any difference, because we only\n          //    have one field with validation in the second step :)\n          helpers.setTouched({});\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper alternativeLabel activeStep={step}>\n            {childrenArray.map((child, index) => (\n              <Step\n                key={child.props.label}\n                completed={step > index || completed}\n              >\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {currentChild}\n\n          <Grid container spacing={2}>\n            {step > 0 ? (\n              <Grid item>\n                <Button\n                  disabled={isSubmitting}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => setStep((s) => s - 1)}\n                >\n                  Back\n                </Button>\n              </Grid>\n            ) : null}\n            <Grid item>\n              <Button\n                startIcon={\n                  isSubmitting ? <CircularProgress size=\"1rem\" /> : null\n                }\n                disabled={isSubmitting}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\n              </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport function CustomDropdown({ name }: { name: string }) {\n  const [field, props] = useField(name);\n\n  return (\n    <FormControl fullWidth error={!!props.error}>\n      <InputLabel htmlFor=\"job\">Job Situation</InputLabel>\n      <Field\n        component={Select}\n        native\n        name=\"job\"\n        inputProps={{\n          id: 'job',\n          'aria-errormessage': props.error ? 'job-error' : null,\n        }}\n      >\n        {field.value !== 'EMPTY' ? null : (\n          <option value=\"EMPTY\">Select your job situation</option>\n        )}\n        <option value=\"FULL\">Full-Time</option>\n        <option value=\"PART\">Part-Time</option>\n        <option value=\"UNEMPLOYED\">Unemployed</option>\n      </Field>\n      <ErrorMessage name=\"job\">\n        {(message) => <FormHelperText id=\"job-error\">{message}</FormHelperText>}\n      </ErrorMessage>\n    </FormControl>\n  );\n\n  // return (\n  //   <FormControl fullWidth error={!!props.error && props.touched}>\n  //     <InputLabel htmlFor=\"job\">Job Situation</InputLabel>\n  //     <Field\n  //       component={Select}\n  //       name=\"job\"\n  //       inputProps={{\n  //         id: 'job',\n  //         'aria-errormessage': props.error ? 'job-error' : null,\n  //       }}\n  //     >\n  //       {field.value !== 'EMPTY' ? null : (\n  //         <MenuItem value=\"EMPTY\">Select your job situation</MenuItem>\n  //       )}\n  //       <MenuItem value=\"FULL\">Full-Time</MenuItem>\n  //       <MenuItem value=\"PART\">Part-Time</MenuItem>\n  //       <MenuItem value=\"UNEMPLOYED\">Unemployed</MenuItem>\n  //     </Field>\n  //     <ErrorMessage name=\"job\">\n  //       {(message) => <FormHelperText id=\"job-error\">{message}</FormHelperText>}\n  //     </ErrorMessage>\n  //   </FormControl>\n  // );\n}\n\nexport function CustomTextFieldWithErrorMessage(props: TextFieldProps) {\n  const hasError = !!props.form.errors[props.field.name];\n\n  const inputProps = hasError\n    ? {\n        ...props.inputProps,\n        'aria-errormessage': `${props.field.name}-helper-text`,\n      }\n    : props.inputProps;\n\n  return <TextField {...props} inputProps={inputProps} />;\n}\n"]},"metadata":{},"sourceType":"module"}